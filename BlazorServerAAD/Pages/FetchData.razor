@page "/fetchdata"

@using BlazorServerAAD.Data
@using Client.Services
@inject WeatherForecastService ForecastService
@inject IHttpClientFactory HttpClientFactory
@inject Microsoft.Identity.Web.ITokenAcquisition TokenAcquisitionService
@inject ISampleService SampleService

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from a service.</p>

@if (forecasts == null)
{
<p><em>Loading...</em></p> }
else
{
<h1>Hello @userDisplayName !!!!</h1>
                <table class="table">
                    <thead>
                        <tr>
                            <th>Subject</th>
                            <th>Sender</th>
                            <th>Received Time</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var mail in messages)
                        {
        <tr>
            <td>@mail.Subject</td>
            <td>@mail.Sender</td>
            <td>@mail.ReceivedTime</td>
        </tr>}
                    </tbody>
                </table>}

@code { private WeatherForecast[] forecasts;
    private string userDisplayName;
    private List<MailMessage> messages = new List<MailMessage>();

    private HttpClient _httpClient;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var sample = await SampleService.RandomText("Jano");

            _httpClient = HttpClientFactory.CreateClient();
            forecasts = await ForecastService.GetForecastAsync(DateTime.Now);

            // get a token
            var token = await TokenAcquisitionService.GetAccessTokenForUserAsync(new string[] { "User.Read", "Mail.Read" });
            //var token = await TokenAcquisitionService.GetAccessTokenForUserAsync(new string[] { "User.Read" });

            // make API call
            _httpClient.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
            var dataRequest = await _httpClient.GetAsync("https://graph.microsoft.com/beta/me");

            if (dataRequest.IsSuccessStatusCode)
            {
                var userData = System.Text.Json.JsonDocument.Parse(await dataRequest.Content.ReadAsStreamAsync());
                userDisplayName = userData.RootElement.GetProperty("displayName").GetString();
            }

            var mailRequest = await _httpClient.GetAsync("https://graph.microsoft.com/beta/me/messages?$select=subject,receivedDateTime,sender&$top=10");
            //var mailRequest = await _httpClient.GetAsync("https://graph.microsoft.com/beta/me/messages?$select=createdDateTime,subject,from");


            if (mailRequest.IsSuccessStatusCode)
            {
                var mailData = System.Text.Json.JsonDocument.Parse(await mailRequest.Content.ReadAsStreamAsync());
                var messagesArray = mailData.RootElement.GetProperty("value").EnumerateArray();

                foreach (var m in messagesArray)
                {
                    var message = new MailMessage();
                    message.Subject = m.GetProperty("subject").GetString();
                    message.Sender = m.GetProperty("sender").GetProperty("emailAddress").GetProperty("address").GetString();
                    message.ReceivedTime = m.GetProperty("receivedDateTime").GetDateTime();
                    messages.Add(message);
                }
            }

            //user_impersonation
            //var apiToken = await TokenAcquisitionService.GetAccessTokenForUserAsync(new string[] { "user_impersonation" });
            var apiToken = await TokenAcquisitionService.GetAccessTokenForUserAsync(new string[] { "https://jansupolikhotmail.onmicrosoft.com/WebApiNetCore3/user_impersonation" });
            if (token != apiToken)
                Console.WriteLine("Tokens are different");

            _httpClient.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", apiToken);
            var apiData = await _httpClient.GetAsync("https://localhost:5011/api/WeatherForecast");
            if (apiData.IsSuccessStatusCode)
            {
                var api = await apiData.Content.ReadAsStreamAsync();
                // AADSTS65001: The user or administrator has not consented to use the application with ID '8ff7755f-f65f-41ca-9e88-f70215f06fb4' named 'BlazorServerAAD'.Send an interactive authorization request for this user and resource.
            }


            string[] scopesManagment = new string[] { "https://management.azure.com/.default" };
            string manToken = await TokenAcquisitionService.GetAccessTokenForUserAsync(scopesManagment);
            _httpClient.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", manToken);
            var scores = await _httpClient.GetAsync("https://management.azure.com/subscriptions/33fb38df-688e-4ca1-8dd8-b46e26262ff8/providers/Microsoft.Security/secureScores?api-version=2020-01-01-preview");

        }
        catch (Exception ex)
        {
            userDisplayName = ex?.Message;
        }
    }

    public class MailMessage
    {
        public string Subject;
        public string Sender;
        public DateTime ReceivedTime;
    } }
